% Static planner for multi-agent path finding for grid maps and the makespan objective
% using train motion on agents
% swap is forbidden

import sat.

main([InsFile]) =>
    %printf("solving %s\n",InsFile),
    cl(InsFile),
    main.

main =>
    ins(Graph, As, Avoid, Cost, _),                   % read input
    cl_facts(Graph,[$neibs(+,-)]),
    N = len(Graph),                     % N = number of nodes
    create_edges(N, E),                 % E = number of edges
    time(once(path(N,E,to_array(As),Avoid,Cost,Plan))),
    output_plan(Plan).

test =>
    testins(Graph, As, Avoid, Cost, _),                   % read input
    cl_facts(Graph,[$neibs(+,-)]),
    N = len(Graph),                     % N = number of nodes
    create_edges(N, E),                 % E = number of edges
    time(once(path(N,E,to_array(As),Avoid,Cost,Plan))),
    output_plan(Plan).


%%%%%%%%%%%%%%%%%%%%
% MAIN COMPUTATION %
%%%%%%%%%%%%%%%%%%%%

path_for_delta(N,E,As,K,M,Avoid,B) =>
    ME = M - 1,

    printf("trying makespan %w\n",M),
    B = new_array(M,K,N),
    C = new_array(ME,K,E),

    if len(Avoid) !== 0 then
        preprocess_avoid(Avoid, B, C)
    end,

    printf("arrays completed!\n"),

    % Initialize the first and last states
    foreach(A in 1..K)    
        (V,FV) = As[A],
        B[1,A,V] = 1,
        B[M,A,FV] = 1,
        preprocess_forward(A,V,FV,M,N,B),
        %printf("^ time of preprocess forward\n"),
        preprocess_backward(A,V,FV,M,N,B),
        %printf("^ time of preprocess backward\n"),
    end,
    preprocess_edges(K,N,ME,B,E,C),

    printf("preprocessing done!\n"),

    %printf("B %w\n",B),

    B :: 0..1,
    C :: 0..1,

    % Each agent occupies up to one vertex at each time.
    foreach (T in 1..M, A in 1..K)
        sum([B[T,A,V] : V in 1..N]) #=< 1
    end,

    % No two agents occupy the same vertex at any time.
    foreach(T in 1..M, V in 1..N) 
        sum([B[T,A,V] : A in 1..K]) #=< 1   
    end,

    % if an edge is used in one direction, it can not be used in the other direction (no swap)
    foreach(T in 1..ME, EID in 1..E) 
        edgeid(EID, U, V),
    	edge(OppositeEID, V, U),
        EList = remove_dups([EID,OppositeEID]),
    	sum([C[T,A,W] : A in 1..K, W in EList]) #=< 1   
    end,

    % if an agent is in a node, it needs to move through one of the edges from that node
    foreach(T in 1..ME, A in 1..K, V in 1..N) 
    	out_edges(V,EList),
        B[T,A,V] #=> sum([C[T,A,W] : W in EList]) #= 1
    end,

    % if agent is using an edge, it must arrive to the connected node in next timestep
    foreach(T in 1..ME, A in 1..K, EID in 1..E) 
        edgeid(EID,_,V),
        C[T,A,EID] #=> B[T+1,A,V] #= 1
    end,

    printf("solving start\n"),

    solve(B).
    %printf("^ time of SAT solving\n").

path(N,E,As,Avoid,Cost,B) =>
    K = len(As),

    if Cost == -1 then
        lower_bound(to_list(As),LB),
        printf("mks LB\n%w\n",LB+1),
        between(LB+1,999999999,M)
    else
        M = Cost
    end,

    path_for_delta(N,E,As,K,M,Avoid,B).


%%%%%%%%%%%%%%%%%%%%%
% UTILITY FUNCTIONS %
%%%%%%%%%%%%%%%%%%%%%

% if there is another group to avoid, we must set B and C to 0 to prevent collisions
preprocess_avoid(Avoid, B, C) =>
    % nodes
    foreach (T in 1..len(Avoid))
        foreach (A1 in 1..len(Avoid[T]))
        	if Avoid[T,A1] != 0 then
	            foreach (A in 1..len(B[T]))
	                B[T,A,Avoid[T,A1]] = 0
	            end
	        end
        end
    end,

    % edges
    foreach (T in 1..len(C))
        foreach (A1 in 1..len(Avoid[T]))
        	if Avoid[T,A1] != 0, Avoid[T+1,A1] != 0 then
	            edge(EID1, Avoid[T,A1], Avoid[T+1,A1]),
	            edge(EID2, Avoid[T+1,A1], Avoid[T,A1]),
	            foreach (A in 1..len(C[T]))
	                C[T,A,EID1] = 0,
	                C[T,A,EID2] = 0
	            end
            end
        end
    end.


% foreach vertex U, if U is at least distance D away from V,
% then agent A cannot occupy vertex U at time T, T+1, ..., T+D-1
preprocess_forward(A,V,FV,Mks,N,B) =>
    foreach (U in 1..N, V !== U)
    	foreach (T in 1..(Mks div 2))
    		if not exist_shorter_path((V,U),T-1) || not exist_shorter_path((U,FV),Mks-T) then
    			B[T,A,U] = 0
    		end
        end
    end.

% foreach vertex U, if U is at least distance D away from FV,
% then agent A cannot occupy vertex U at time MaxT, MaxT-1, ..., MaxT-D+1
preprocess_backward(A,V,FV,Mks,N,B) =>
    foreach (U in 1..N, FV !== U)
    	foreach (T in Mks..-1..(Mks div 2))
    		if not exist_shorter_path((U,FV),Mks-T) || not exist_shorter_path((V,U),T-1) then
	            B[T,A,U] = 0
            end
        end
    end.


% if agent can not be in a vertex, then he could not use any edge connected to it
preprocess_edges(K,N,M1,B,E,C) =>
    % outgoing edges
	foreach(A in 1..K, T in 1..M1-1, V in 1..N)
		if B[T,A,V] == 0 then
            out_edges(V,EList),
			foreach(EID in EList)
                C[T,A,EID] = 0
			end
		end
	end,

    % incoming edges - works only for undirected graphs!!!
	foreach(A in 1..K, T in 2..M1, V in 1..N)
		if B[T,A,V] == 0 then
            out_edges(V,EList),
            foreach(EID in EList)
                edgeid(EID, V, U),
                edge(OppositeEID, U, V),
                C[T-1,A,OppositeEID] = 0
            end
        end
	end.

lower_bound(As,LB) =>
    lower_bound(As,0,LB).

lower_bound([],LB0,LB) => LB = LB0.
lower_bound([(V,FV)|As],LB0,LB) =>
    shortest_path_cost((V,FV),Cost),
	lower_bound(As,max(LB0,Cost),LB).

% TODO - compute shortest path using exist_shorter_path
%table (+,min)
%shortest_path_cost((0,_),Cost) => Cost = 0.
%shortest_path_cost((V,V),Cost) => Cost = 0.
%shortest_path_cost((V,FV),Cost) => 
%    neibs(V,Neibs),
%    member(NextV,Neibs),
%    shortest_path_cost((NextV,FV),Cost1),
%    Cost = Cost1+1.

% TODO - there should be upper bound
shortest_path_cost((V,FV),Cost) => 
    TmpCost = 0,
    while(not exist_shorter_path((V,FV),TmpCost))
        TmpCost := TmpCost + 1
    end,
    Cost = TmpCost.


% is there a path from V to FV that is not longer than Cost?
table (+,+)
exist_shorter_path((V,FV),Cost), Cost > 1 ?=>
	Cost1 = Cost-1,
	exist_shorter_path((V,FV),Cost1).
	
exist_shorter_path((V,V),Cost), Cost >= 0 => true.
exist_shorter_path((V,FV),Cost), Cost > 0 => 
    neibs(V,Neibs),
    member(NextV,Neibs),
    Cost1 = Cost-1,
    exist_shorter_path((NextV,FV),Cost1).


% create $edge from $neibs
create_edges(N, E) =>
	Ed1 = [],
    Ed2 = [],
	EID = 1,
	foreach(V in 1..N)
		neibs(V,Neibs),
		L = len(Neibs),
		foreach(I in 1..L)
			Ed1 := [$edge(EID, V, Neibs[I])|Ed1],
            Ed2 := [$edgeid(EID, V, Neibs[I])|Ed2],
			EID := EID + 1
		end
	end,

    cl_facts(Ed1,[$edge(-,+,+)]),
    cl_facts(Ed2,[$edgeid(+,-,-)]),
    E = len(Ed1).


% for node W, get list of outgoing edges
out_edges(W,EList) =>
	ETMP = [],
    neibs(W,Neibs),
    L = len(Neibs),
    foreach(I in 1..L)
        edge(EID,W,Neibs[I]),
        ETMP := [EID] ++ ETMP
	end,
	EList = ETMP.

output_plan(B) =>
    M = len(B) - 1,
    K = len(B[1]),
    N = len(B[1,1]),
    printf("agents | timesteps\n"),
    printf("%w %w\n",K,M+1),
    %printf("timesteps %w\n",M+1),
	foreach (A in 1..K)
		foreach (T in 1..M+1)
			foreach (V in 1..N)
				if B[T,A,V] == 1 then
					printf("%w ",V)
				end
			end
		end,
        nl
	end.


%%%%%%%%%%%%%%%
% TEST INPUTS %
%%%%%%%%%%%%%%%

testins(Graph, As, Avoid, Makespan, SumOfCosts) =>
    Graph = [
    $neibs(1,[1,3]),
    $neibs(2,[2,3]),
    $neibs(3,[3,4,1,2]),
    $neibs(4,[4,3,5,6]),
    $neibs(5,[5,4]),
    $neibs(6,[6,4])
    ],
    As = [(1,5)],
    Avoid = new_array(6,1),
    Avoid[1,1] = 6,
    Avoid[2,1] = 4,
    Avoid[3,1] = 3,
    Avoid[4,1] = 2,
    Avoid[5,1] = 0,
    Avoid[6,1] = 0,
    Makespan = 6,
    SumOfCosts = -1.


testins1(Graph, As, Avoid, Makespan, SumOfCosts) =>
    Graph = [
    $neibs(1,[1,2]),
    $neibs(2,[2,29,1,3]),
    $neibs(3,[3,30,2,4]),
    $neibs(4,[4,31,3,5]),
    $neibs(5,[5,4,6]),
    $neibs(6,[6,32,5,7]),
    $neibs(7,[7,6,8]),
    $neibs(8,[8,7,9]),
    $neibs(9,[9,33,8,10]),
    $neibs(10,[10,34,9]),
    $neibs(11,[11,36,12]),
    $neibs(12,[12,37,11,13]),
    $neibs(13,[13,38,12,14]),
    $neibs(14,[14,39,13,15]),
    $neibs(15,[15,40,14,16]),
    $neibs(16,[16,41,15]),
    $neibs(17,[17,43,18]),
    $neibs(18,[18,17,19]),
    $neibs(19,[19,44,18]),
    $neibs(20,[20,45]),
    $neibs(21,[21,47,22]),
    $neibs(22,[22,21,23]),
    $neibs(23,[23,48,22,24]),
    $neibs(24,[24,49,23,25]),
    $neibs(25,[25,50,24,26]),
    $neibs(26,[26,51,25,27]),
    $neibs(27,[27,52,26,28]),
    $neibs(28,[28,53,27]),
    $neibs(29,[29,2,55,30]),
    $neibs(30,[30,3,56,29,31]),
    $neibs(31,[31,4,57,30]),
    $neibs(32,[32,6,59]),
    $neibs(33,[33,9,62,34]),
    $neibs(34,[34,10,63,33,35]),
    $neibs(35,[35,64,34,36]),
    $neibs(36,[36,11,65,35,37]),
    $neibs(37,[37,12,66,36,38]),
    $neibs(38,[38,13,67,37,39]),
    $neibs(39,[39,14,38,40]),
    $neibs(40,[40,15,68,39,41]),
    $neibs(41,[41,16,69,40,42]),
    $neibs(42,[42,70,41,43]),
    $neibs(43,[43,17,71,42]),
    $neibs(44,[44,19,73]),
    $neibs(45,[45,20,75,46]),
    $neibs(46,[46,45,47]),
    $neibs(47,[47,21,46]),
    $neibs(48,[48,23,77,49]),
    $neibs(49,[49,24,78,48,50]),
    $neibs(50,[50,25,49,51]),
    $neibs(51,[51,26,79,50,52]),
    $neibs(52,[52,27,80,51,53]),
    $neibs(53,[53,28,81,52]),
    $neibs(54,[54,82,55]),
    $neibs(55,[55,29,83,54,56]),
    $neibs(56,[56,30,84,55,57]),
    $neibs(57,[57,31,85,56,58]),
    $neibs(58,[58,86,57,59]),
    $neibs(59,[59,32,58,60]),
    $neibs(60,[60,87,59,61]),
    $neibs(61,[61,60,62]),
    $neibs(62,[62,33,88,61,63]),
    $neibs(63,[63,34,89,62,64]),
    $neibs(64,[64,35,90,63,65]),
    $neibs(65,[65,36,91,64,66]),
    $neibs(66,[66,37,92,65,67]),
    $neibs(67,[67,38,93,66]),
    $neibs(68,[68,40,95,69]),
    $neibs(69,[69,41,96,68,70]),
    $neibs(70,[70,42,97,69,71]),
    $neibs(71,[71,43,70,72]),
    $neibs(72,[72,98,71,73]),
    $neibs(73,[73,44,99,72,74]),
    $neibs(74,[74,100,73,75]),
    $neibs(75,[75,45,101,74]),
    $neibs(76,[76,104,77]),
    $neibs(77,[77,48,105,76,78]),
    $neibs(78,[78,49,106,77]),
    $neibs(79,[79,51,80]),
    $neibs(80,[80,52,108,79,81]),
    $neibs(81,[81,53,109,80]),
    $neibs(82,[82,54,110,83]),
    $neibs(83,[83,55,82,84]),
    $neibs(84,[84,56,83,85]),
    $neibs(85,[85,57,111,84,86]),
    $neibs(86,[86,58,112,85]),
    $neibs(87,[87,60,114]),
    $neibs(88,[88,62,116,89]),
    $neibs(89,[89,63,117,88,90]),
    $neibs(90,[90,64,118,89,91]),
    $neibs(91,[91,65,119,90,92]),
    $neibs(92,[92,66,120,91,93]),
    $neibs(93,[93,67,121,92,94]),
    $neibs(94,[94,93,95]),
    $neibs(95,[95,68,94,96]),
    $neibs(96,[96,69,122,95,97]),
    $neibs(97,[97,70,96]),
    $neibs(98,[98,72,124,99]),
    $neibs(99,[99,73,125,98,100]),
    $neibs(100,[100,74,126,99,101]),
    $neibs(101,[101,75,127,100,102]),
    $neibs(102,[102,128,101,103]),
    $neibs(103,[103,102,104]),
    $neibs(104,[104,76,129,103,105]),
    $neibs(105,[105,77,130,104,106]),
    $neibs(106,[106,78,105,107]),
    $neibs(107,[107,131,106]),
    $neibs(108,[108,80,133,109]),
    $neibs(109,[109,81,134,108]),
    $neibs(110,[110,82,135]),
    $neibs(111,[111,85,138,112]),
    $neibs(112,[112,86,139,111,113]),
    $neibs(113,[113,140,112,114]),
    $neibs(114,[114,87,113,115]),
    $neibs(115,[115,141,114,116]),
    $neibs(116,[116,88,142,115,117]),
    $neibs(117,[117,89,116,118]),
    $neibs(118,[118,90,143,117,119]),
    $neibs(119,[119,91,118,120]),
    $neibs(120,[120,92,144,119,121]),
    $neibs(121,[121,93,145,120]),
    $neibs(122,[122,96,146]),
    $neibs(123,[123,148,124]),
    $neibs(124,[124,98,149,123,125]),
    $neibs(125,[125,99,150,124,126]),
    $neibs(126,[126,100,151,125,127]),
    $neibs(127,[127,101,126,128]),
    $neibs(128,[128,102,152,127]),
    $neibs(129,[129,104,154,130]),
    $neibs(130,[130,105,155,129]),
    $neibs(131,[131,107,156,132]),
    $neibs(132,[132,157,131,133]),
    $neibs(133,[133,108,132,134]),
    $neibs(134,[134,109,133]),
    $neibs(135,[135,110,158,136]),
    $neibs(136,[136,159,135,137]),
    $neibs(137,[137,160,136,138]),
    $neibs(138,[138,111,161,137,139]),
    $neibs(139,[139,112,162,138,140]),
    $neibs(140,[140,113,163,139]),
    $neibs(141,[141,115,164,142]),
    $neibs(142,[142,116,165,141]),
    $neibs(143,[143,118]),
    $neibs(144,[144,120,167,145]),
    $neibs(145,[145,121,168,144]),
    $neibs(146,[146,122,171,147]),
    $neibs(147,[147,172,146,148]),
    $neibs(148,[148,123,173,147,149]),
    $neibs(149,[149,124,148,150]),
    $neibs(150,[150,125,174,149,151]),
    $neibs(151,[151,126,175,150]),
    $neibs(152,[152,128,177,153]),
    $neibs(153,[153,178,152,154]),
    $neibs(154,[154,129,179,153,155]),
    $neibs(155,[155,130,180,154]),
    $neibs(156,[156,131,181,157]),
    $neibs(157,[157,132,182,156]),
    $neibs(158,[158,135,184,159]),
    $neibs(159,[159,136,158,160]),
    $neibs(160,[160,137,185,159,161]),
    $neibs(161,[161,138,186,160,162]),
    $neibs(162,[162,139,187,161,163]),
    $neibs(163,[163,140,162]),
    $neibs(164,[164,141,189,165]),
    $neibs(165,[165,142,190,164]),
    $neibs(166,[166,193,167]),
    $neibs(167,[167,144,194,166,168]),
    $neibs(168,[168,145,195,167,169]),
    $neibs(169,[169,196,168,170]),
    $neibs(170,[170,197,169,171]),
    $neibs(171,[171,146,198,170,172]),
    $neibs(172,[172,147,199,171,173]),
    $neibs(173,[173,148,200,172]),
    $neibs(174,[174,150,202,175]),
    $neibs(175,[175,151,174,176]),
    $neibs(176,[176,175,177]),
    $neibs(177,[177,152,203,176,178]),
    $neibs(178,[178,153,204,177,179]),
    $neibs(179,[179,154,205,178,180]),
    $neibs(180,[180,155,179]),
    $neibs(181,[181,156,207,182]),
    $neibs(182,[182,157,181,183]),
    $neibs(183,[183,208,182]),
    $neibs(184,[184,158,210]),
    $neibs(185,[185,160,212,186]),
    $neibs(186,[186,161,213,185,187]),
    $neibs(187,[187,162,214,186]),
    $neibs(188,[188,189]),
    $neibs(189,[189,164,216,188,190]),
    $neibs(190,[190,165,217,189,191]),
    $neibs(191,[191,218,190,192]),
    $neibs(192,[192,219,191,193]),
    $neibs(193,[193,166,220,192,194]),
    $neibs(194,[194,167,221,193,195]),
    $neibs(195,[195,168,222,194,196]),
    $neibs(196,[196,169,223,195,197]),
    $neibs(197,[197,170,224,196,198]),
    $neibs(198,[198,171,197,199]),
    $neibs(199,[199,172,225,198,200]),
    $neibs(200,[200,173,226,199,201]),
    $neibs(201,[201,227,200,202]),
    $neibs(202,[202,174,228,201]),
    $neibs(203,[203,177,231,204]),
    $neibs(204,[204,178,203,205]),
    $neibs(205,[205,179,232,204]),
    $neibs(206,[206,233,207]),
    $neibs(207,[207,181,234,206]),
    $neibs(208,[208,183,236,209]),
    $neibs(209,[209,237,208]),
    $neibs(210,[210,184,238,211]),
    $neibs(211,[211,239,210,212]),
    $neibs(212,[212,185,211,213]),
    $neibs(213,[213,186,240,212,214]),
    $neibs(214,[214,187,213,215]),
    $neibs(215,[215,241,214]),
    $neibs(216,[216,189,243,217]),
    $neibs(217,[217,190,244,216,218]),
    $neibs(218,[218,191,245,217,219]),
    $neibs(219,[219,192,246,218,220]),
    $neibs(220,[220,193,247,219,221]),
    $neibs(221,[221,194,248,220,222]),
    $neibs(222,[222,195,249,221,223]),
    $neibs(223,[223,196,250,222,224]),
    $neibs(224,[224,197,251,223]),
    $neibs(225,[225,199,226]),
    $neibs(226,[226,200,253,225,227]),
    $neibs(227,[227,201,226,228]),
    $neibs(228,[228,202,254,227,229]),
    $neibs(229,[229,255,228,230]),
    $neibs(230,[230,256,229,231]),
    $neibs(231,[231,203,257,230]),
    $neibs(232,[232,205,259]),
    $neibs(233,[233,206,234]),
    $neibs(234,[234,207,233,235]),
    $neibs(235,[235,261,234,236]),
    $neibs(236,[236,208,262,235,237]),
    $neibs(237,[237,209,263,236]),
    $neibs(238,[238,210,239]),
    $neibs(239,[239,211,264,238]),
    $neibs(240,[240,213,265]),
    $neibs(241,[241,215,267,242]),
    $neibs(242,[242,268,241,243]),
    $neibs(243,[243,216,269,242,244]),
    $neibs(244,[244,217,270,243,245]),
    $neibs(245,[245,218,271,244,246]),
    $neibs(246,[246,219,272,245,247]),
    $neibs(247,[247,220,273,246,248]),
    $neibs(248,[248,221,247,249]),
    $neibs(249,[249,222,274,248,250]),
    $neibs(250,[250,223,249,251]),
    $neibs(251,[251,224,275,250,252]),
    $neibs(252,[252,276,251]),
    $neibs(253,[253,226,278]),
    $neibs(254,[254,228,280,255]),
    $neibs(255,[255,229,281,254,256]),
    $neibs(256,[256,230,255,257]),
    $neibs(257,[257,231,282,256,258]),
    $neibs(258,[258,283,257,259]),
    $neibs(259,[259,232,284,258,260]),
    $neibs(260,[260,259]),
    $neibs(261,[261,235,287,262]),
    $neibs(262,[262,236,288,261,263]),
    $neibs(263,[263,237,289,262]),
    $neibs(264,[264,239,291]),
    $neibs(265,[265,240,293,266]),
    $neibs(266,[266,294,265,267]),
    $neibs(267,[267,241,295,266,268]),
    $neibs(268,[268,242,296,267,269]),
    $neibs(269,[269,243,297,268,270]),
    $neibs(270,[270,244,298,269,271]),
    $neibs(271,[271,245,299,270,272]),
    $neibs(272,[272,246,300,271,273]),
    $neibs(273,[273,247,301,272]),
    $neibs(274,[274,249,302]),
    $neibs(275,[275,251,304,276]),
    $neibs(276,[276,252,305,275,277]),
    $neibs(277,[277,306,276,278]),
    $neibs(278,[278,253,277,279]),
    $neibs(279,[279,307,278,280]),
    $neibs(280,[280,254,279,281]),
    $neibs(281,[281,255,308,280]),
    $neibs(282,[282,257,309,283]),
    $neibs(283,[283,258,310,282,284]),
    $neibs(284,[284,259,311,283]),
    $neibs(285,[285,313,286]),
    $neibs(286,[286,314,285,287]),
    $neibs(287,[287,261,315,286,288]),
    $neibs(288,[288,262,287,289]),
    $neibs(289,[289,263,316,288]),
    $neibs(290,[290,317,291]),
    $neibs(291,[291,264,318,290,292]),
    $neibs(292,[292,291,293]),
    $neibs(293,[293,265,319,292,294]),
    $neibs(294,[294,266,320,293,295]),
    $neibs(295,[295,267,321,294,296]),
    $neibs(296,[296,268,322,295,297]),
    $neibs(297,[297,269,323,296,298]),
    $neibs(298,[298,270,297,299]),
    $neibs(299,[299,271,324,298,300]),
    $neibs(300,[300,272,299,301]),
    $neibs(301,[301,273,325,300]),
    $neibs(302,[302,274,303]),
    $neibs(303,[303,326,302,304]),
    $neibs(304,[304,275,303,305]),
    $neibs(305,[305,276,327,304,306]),
    $neibs(306,[306,277,328,305]),
    $neibs(307,[307,279,330]),
    $neibs(308,[308,281,332]),
    $neibs(309,[309,282,334,310]),
    $neibs(310,[310,283,335,309,311]),
    $neibs(311,[311,284,336,310,312]),
    $neibs(312,[312,311,313]),
    $neibs(313,[313,285,337,312,314]),
    $neibs(314,[314,286,338,313,315]),
    $neibs(315,[315,287,339,314]),
    $neibs(316,[316,289,341]),
    $neibs(317,[317,290,342,318]),
    $neibs(318,[318,291,317]),
    $neibs(319,[319,293,344,320]),
    $neibs(320,[320,294,345,319,321]),
    $neibs(321,[321,295,346,320,322]),
    $neibs(322,[322,296,347,321,323]),
    $neibs(323,[323,297,348,322]),
    $neibs(324,[324,299,350]),
    $neibs(325,[325,301,352]),
    $neibs(326,[326,303,355]),
    $neibs(327,[327,305,357,328]),
    $neibs(328,[328,306,358,327,329]),
    $neibs(329,[329,328,330]),
    $neibs(330,[330,307,359,329,331]),
    $neibs(331,[331,330,332]),
    $neibs(332,[332,308,360,331,333]),
    $neibs(333,[333,361,332,334]),
    $neibs(334,[334,309,362,333,335]),
    $neibs(335,[335,310,363,334,336]),
    $neibs(336,[336,311,364,335]),
    $neibs(337,[337,313,365,338]),
    $neibs(338,[338,314,366,337,339]),
    $neibs(339,[339,315,367,338,340]),
    $neibs(340,[340,339,341]),
    $neibs(341,[341,316,368,340]),
    $neibs(342,[342,317,369]),
    $neibs(343,[343,371,344]),
    $neibs(344,[344,319,343,345]),
    $neibs(345,[345,320,344,346]),
    $neibs(346,[346,321,345,347]),
    $neibs(347,[347,322,372,346,348]),
    $neibs(348,[348,323,373,347,349]),
    $neibs(349,[349,374,348,350]),
    $neibs(350,[350,324,375,349,351]),
    $neibs(351,[351,376,350,352]),
    $neibs(352,[352,325,377,351,353]),
    $neibs(353,[353,378,352,354]),
    $neibs(354,[354,353,355]),
    $neibs(355,[355,326,379,354,356]),
    $neibs(356,[356,380,355,357]),
    $neibs(357,[357,327,381,356,358]),
    $neibs(358,[358,328,382,357]),
    $neibs(359,[359,330,384]),
    $neibs(360,[360,332,386,361]),
    $neibs(361,[361,333,387,360,362]),
    $neibs(362,[362,334,361,363]),
    $neibs(363,[363,335,388,362,364]),
    $neibs(364,[364,336,389,363]),
    $neibs(365,[365,337,391,366]),
    $neibs(366,[366,338,392,365,367]),
    $neibs(367,[367,339,393,366]),
    $neibs(368,[368,341,395]),
    $neibs(369,[369,342,396,370]),
    $neibs(370,[370,397,369,371]),
    $neibs(371,[371,343,398,370]),
    $neibs(372,[372,347,402,373]),
    $neibs(373,[373,348,403,372,374]),
    $neibs(374,[374,349,373,375]),
    $neibs(375,[375,350,404,374,376]),
    $neibs(376,[376,351,405,375,377]),
    $neibs(377,[377,352,406,376,378]),
    $neibs(378,[378,353,407,377]),
    $neibs(379,[379,355,408,380]),
    $neibs(380,[380,356,379,381]),
    $neibs(381,[381,357,409,380,382]),
    $neibs(382,[382,358,381,383]),
    $neibs(383,[383,410,382,384]),
    $neibs(384,[384,359,411,383,385]),
    $neibs(385,[385,384,386]),
    $neibs(386,[386,360,412,385,387]),
    $neibs(387,[387,361,413,386]),
    $neibs(388,[388,363,415,389]),
    $neibs(389,[389,364,416,388,390]),
    $neibs(390,[390,417,389,391]),
    $neibs(391,[391,365,418,390,392]),
    $neibs(392,[392,366,419,391,393]),
    $neibs(393,[393,367,420,392,394]),
    $neibs(394,[394,421,393,395]),
    $neibs(395,[395,368,422,394]),
    $neibs(396,[396,369,423,397]),
    $neibs(397,[397,370,424,396,398]),
    $neibs(398,[398,371,397,399]),
    $neibs(399,[399,425,398,400]),
    $neibs(400,[400,426,399,401]),
    $neibs(401,[401,427,400,402]),
    $neibs(402,[402,372,401,403]),
    $neibs(403,[403,373,428,402]),
    $neibs(404,[404,375,430,405]),
    $neibs(405,[405,376,431,404,406]),
    $neibs(406,[406,377,432,405,407]),
    $neibs(407,[407,378,433,406]),
    $neibs(408,[408,379,435]),
    $neibs(409,[409,381,436]),
    $neibs(410,[410,383,438,411]),
    $neibs(411,[411,384,439,410]),
    $neibs(412,[412,386,440,413]),
    $neibs(413,[413,387,441,412,414]),
    $neibs(414,[414,413,415]),
    $neibs(415,[415,388,414,416]),
    $neibs(416,[416,389,415,417]),
    $neibs(417,[417,390,442,416,418]),
    $neibs(418,[418,391,443,417,419]),
    $neibs(419,[419,392,444,418,420]),
    $neibs(420,[420,393,445,419,421]),
    $neibs(421,[421,394,420,422]),
    $neibs(422,[422,395,446,421]),
    $neibs(423,[423,396,447,424]),
    $neibs(424,[424,397,423]),
    $neibs(425,[425,399,449,426]),
    $neibs(426,[426,400,450,425,427]),
    $neibs(427,[427,401,451,426]),
    $neibs(428,[428,403,453,429]),
    $neibs(429,[429,428,430]),
    $neibs(430,[430,404,429,431]),
    $neibs(431,[431,405,430,432]),
    $neibs(432,[432,406,454,431,433]),
    $neibs(433,[433,407,455,432,434]),
    $neibs(434,[434,433,435]),
    $neibs(435,[435,408,456,434]),
    $neibs(436,[436,409,457,437]),
    $neibs(437,[437,458,436,438]),
    $neibs(438,[438,410,437,439]),
    $neibs(439,[439,411,459,438]),
    $neibs(440,[440,412,460,441]),
    $neibs(441,[441,413,461,440]),
    $neibs(442,[442,417,463,443]),
    $neibs(443,[443,418,464,442,444]),
    $neibs(444,[444,419,465,443,445]),
    $neibs(445,[445,420,444]),
    $neibs(446,[446,422]),
    $neibs(447,[447,423]),
    $neibs(448,[448,467,449]),
    $neibs(449,[449,425,468,448,450]),
    $neibs(450,[450,426,469,449,451]),
    $neibs(451,[451,427,470,450,452]),
    $neibs(452,[452,471,451,453]),
    $neibs(453,[453,428,472,452]),
    $neibs(454,[454,432,475,455]),
    $neibs(455,[455,433,476,454]),
    $neibs(456,[456,435,478]),
    $neibs(457,[457,436,480,458]),
    $neibs(458,[458,437,481,457]),
    $neibs(459,[459,439]),
    $neibs(460,[460,440,484,461]),
    $neibs(461,[461,441,460]),
    $neibs(462,[462,487,463]),
    $neibs(463,[463,442,488,462,464]),
    $neibs(464,[464,443,489,463,465]),
    $neibs(465,[465,444,490,464]),
    $neibs(466,[466,492,467]),
    $neibs(467,[467,448,493,466,468]),
    $neibs(468,[468,449,494,467,469]),
    $neibs(469,[469,450,495,468,470]),
    $neibs(470,[470,451,496,469,471]),
    $neibs(471,[471,452,470,472]),
    $neibs(472,[472,453,497,471,473]),
    $neibs(473,[473,498,472,474]),
    $neibs(474,[474,499,473]),
    $neibs(475,[475,454,500,476]),
    $neibs(476,[476,455,501,475,477]),
    $neibs(477,[477,476,478]),
    $neibs(478,[478,456,502,477,479]),
    $neibs(479,[479,503,478,480]),
    $neibs(480,[480,457,479,481]),
    $neibs(481,[481,458,504,480,482]),
    $neibs(482,[482,481]),
    $neibs(483,[483,506,484]),
    $neibs(484,[484,460,507,483]),
    $neibs(485,[485,508,486]),
    $neibs(486,[486,509,485,487]),
    $neibs(487,[487,462,510,486,488]),
    $neibs(488,[488,463,487,489]),
    $neibs(489,[489,464,511,488,490]),
    $neibs(490,[490,465,512,489]),
    $neibs(491,[491,516,492]),
    $neibs(492,[492,466,491,493]),
    $neibs(493,[493,467,517,492,494]),
    $neibs(494,[494,468,493,495]),
    $neibs(495,[495,469,518,494,496]),
    $neibs(496,[496,470,519,495]),
    $neibs(497,[497,472,521,498]),
    $neibs(498,[498,473,522,497,499]),
    $neibs(499,[499,474,523,498]),
    $neibs(500,[500,475,525,501]),
    $neibs(501,[501,476,500]),
    $neibs(502,[502,478,527,503]),
    $neibs(503,[503,479,528,502]),
    $neibs(504,[504,481,530]),
    $neibs(505,[505,532,506]),
    $neibs(506,[506,483,533,505,507]),
    $neibs(507,[507,484,534,506]),
    $neibs(508,[508,485,509]),
    $neibs(509,[509,486,535,508,510]),
    $neibs(510,[510,487,509]),
    $neibs(511,[511,489,537,512]),
    $neibs(512,[512,490,538,511,513]),
    $neibs(513,[513,512,514]),
    $neibs(514,[514,539,513,515]),
    $neibs(515,[515,540,514]),
    $neibs(516,[516,491,541]),
    $neibs(517,[517,493,543]),
    $neibs(518,[518,495,545,519]),
    $neibs(519,[519,496,546,518,520]),
    $neibs(520,[520,547,519,521]),
    $neibs(521,[521,497,520,522]),
    $neibs(522,[522,498,548,521,523]),
    $neibs(523,[523,499,522,524]),
    $neibs(524,[524,549,523,525]),
    $neibs(525,[525,500,550,524]),
    $neibs(526,[526,552,527]),
    $neibs(527,[527,502,553,526,528]),
    $neibs(528,[528,503,554,527,529]),
    $neibs(529,[529,555,528,530]),
    $neibs(530,[530,504,556,529,531]),
    $neibs(531,[531,530,532]),
    $neibs(532,[532,505,557,531,533]),
    $neibs(533,[533,506,558,532,534]),
    $neibs(534,[534,507,533]),
    $neibs(535,[535,509,559]),
    $neibs(536,[536,537]),
    $neibs(537,[537,511,536,538]),
    $neibs(538,[538,512,537]),
    $neibs(539,[539,514,562,540]),
    $neibs(540,[540,515,563,539]),
    $neibs(541,[541,516,564,542]),
    $neibs(542,[542,565,541,543]),
    $neibs(543,[543,517,542,544]),
    $neibs(544,[544,566,543,545]),
    $neibs(545,[545,518,544,546]),
    $neibs(546,[546,519,567,545,547]),
    $neibs(547,[547,520,568,546]),
    $neibs(548,[548,522,569]),
    $neibs(549,[549,524,571,550]),
    $neibs(550,[550,525,572,549,551]),
    $neibs(551,[551,550,552]),
    $neibs(552,[552,526,573,551,553]),
    $neibs(553,[553,527,574,552,554]),
    $neibs(554,[554,528,575,553,555]),
    $neibs(555,[555,529,576,554,556]),
    $neibs(556,[556,530,577,555]),
    $neibs(557,[557,532,558]),
    $neibs(558,[558,533,579,557]),
    $neibs(559,[559,535,583,560]),
    $neibs(560,[560,584,559]),
    $neibs(561,[561,588,562]),
    $neibs(562,[562,539,561,563]),
    $neibs(563,[563,540,589,562]),
    $neibs(564,[564,541,590,565]),
    $neibs(565,[565,542,591,564]),
    $neibs(566,[566,544,593]),
    $neibs(567,[567,546,595,568]),
    $neibs(568,[568,547,596,567]),
    $neibs(569,[569,548,597,570]),
    $neibs(570,[570,598,569,571]),
    $neibs(571,[571,549,599,570,572]),
    $neibs(572,[572,550,600,571]),
    $neibs(573,[573,552,574]),
    $neibs(574,[574,553,602,573,575]),
    $neibs(575,[575,554,603,574,576]),
    $neibs(576,[576,555,604,575,577]),
    $neibs(577,[577,556,605,576,578]),
    $neibs(578,[578,577]),
    $neibs(579,[579,558,607,580]),
    $neibs(580,[580,608,579,581]),
    $neibs(581,[581,580,582]),
    $neibs(582,[582,609,581,583]),
    $neibs(583,[583,559,582,584]),
    $neibs(584,[584,560,610,583,585]),
    $neibs(585,[585,584,586]),
    $neibs(586,[586,585,587]),
    $neibs(587,[587,611,586,588]),
    $neibs(588,[588,561,612,587]),
    $neibs(589,[589,563,614]),
    $neibs(590,[590,564,615,591]),
    $neibs(591,[591,565,616,590,592]),
    $neibs(592,[592,617,591,593]),
    $neibs(593,[593,566,618,592,594]),
    $neibs(594,[594,619,593,595]),
    $neibs(595,[595,567,620,594,596]),
    $neibs(596,[596,568,621,595]),
    $neibs(597,[597,569,623,598]),
    $neibs(598,[598,570,624,597,599]),
    $neibs(599,[599,571,625,598,600]),
    $neibs(600,[600,572,626,599,601]),
    $neibs(601,[601,627,600]),
    $neibs(602,[602,574,629,603]),
    $neibs(603,[603,575,630,602,604]),
    $neibs(604,[604,576,631,603,605]),
    $neibs(605,[605,577,604]),
    $neibs(606,[606,633,607]),
    $neibs(607,[607,579,634,606,608]),
    $neibs(608,[608,580,607]),
    $neibs(609,[609,582]),
    $neibs(610,[610,584,637]),
    $neibs(611,[611,587,612]),
    $neibs(612,[612,588,639,611,613]),
    $neibs(613,[613,640,612,614]),
    $neibs(614,[614,589,641,613]),
    $neibs(615,[615,590,642,616]),
    $neibs(616,[616,591,643,615,617]),
    $neibs(617,[617,592,644,616,618]),
    $neibs(618,[618,593,645,617,619]),
    $neibs(619,[619,594,646,618,620]),
    $neibs(620,[620,595,647,619,621]),
    $neibs(621,[621,596,648,620,622]),
    $neibs(622,[622,649,621,623]),
    $neibs(623,[623,597,650,622,624]),
    $neibs(624,[624,598,651,623,625]),
    $neibs(625,[625,599,652,624,626]),
    $neibs(626,[626,600,653,625,627]),
    $neibs(627,[627,601,654,626,628]),
    $neibs(628,[628,655,627,629]),
    $neibs(629,[629,602,656,628,630]),
    $neibs(630,[630,603,657,629,631]),
    $neibs(631,[631,604,630]),
    $neibs(632,[632,659,633]),
    $neibs(633,[633,606,660,632,634]),
    $neibs(634,[634,607,661,633]),
    $neibs(635,[635,663]),
    $neibs(636,[636,665,637]),
    $neibs(637,[637,610,636]),
    $neibs(638,[638,667]),
    $neibs(639,[639,612,668,640]),
    $neibs(640,[640,613,669,639,641]),
    $neibs(641,[641,614,640]),
    $neibs(642,[642,615,670,643]),
    $neibs(643,[643,616,642,644]),
    $neibs(644,[644,617,671,643,645]),
    $neibs(645,[645,618,672,644,646]),
    $neibs(646,[646,619,673,645,647]),
    $neibs(647,[647,620,674,646,648]),
    $neibs(648,[648,621,675,647,649]),
    $neibs(649,[649,622,676,648,650]),
    $neibs(650,[650,623,649,651]),
    $neibs(651,[651,624,677,650,652]),
    $neibs(652,[652,625,651,653]),
    $neibs(653,[653,626,678,652,654]),
    $neibs(654,[654,627,679,653,655]),
    $neibs(655,[655,628,680,654,656]),
    $neibs(656,[656,629,681,655,657]),
    $neibs(657,[657,630,682,656]),
    $neibs(658,[658,684,659]),
    $neibs(659,[659,632,685,658,660]),
    $neibs(660,[660,633,686,659,661]),
    $neibs(661,[661,634,660,662]),
    $neibs(662,[662,661,663]),
    $neibs(663,[663,635,687,662,664]),
    $neibs(664,[664,688,663,665]),
    $neibs(665,[665,636,689,664]),
    $neibs(666,[666,691,667]),
    $neibs(667,[667,638,692,666]),
    $neibs(668,[668,639,694,669]),
    $neibs(669,[669,640,695,668]),
    $neibs(670,[670,642,696]),
    $neibs(671,[671,644,672]),
    $neibs(672,[672,645,698,671,673]),
    $neibs(673,[673,646,699,672,674]),
    $neibs(674,[674,647,673,675]),
    $neibs(675,[675,648,700,674,676]),
    $neibs(676,[676,649,701,675]),
    $neibs(677,[677,651,702]),
    $neibs(678,[678,653,704,679]),
    $neibs(679,[679,654,705,678,680]),
    $neibs(680,[680,655,706,679,681]),
    $neibs(681,[681,656,707,680,682]),
    $neibs(682,[682,657,708,681,683]),
    $neibs(683,[683,709,682,684]),
    $neibs(684,[684,658,710,683,685]),
    $neibs(685,[685,659,711,684,686]),
    $neibs(686,[686,660,712,685]),
    $neibs(687,[687,663,715,688]),
    $neibs(688,[688,664,716,687,689]),
    $neibs(689,[689,665,717,688,690]),
    $neibs(690,[690,718,689,691]),
    $neibs(691,[691,666,719,690,692]),
    $neibs(692,[692,667,720,691,693]),
    $neibs(693,[693,721,692,694]),
    $neibs(694,[694,668,722,693,695]),
    $neibs(695,[695,669,723,694]),
    $neibs(696,[696,670,697]),
    $neibs(697,[697,725,696]),
    $neibs(698,[698,672,699]),
    $neibs(699,[699,673,698]),
    $neibs(700,[700,675,728,701]),
    $neibs(701,[701,676,729,700]),
    $neibs(702,[702,677,731,703]),
    $neibs(703,[703,732,702,704]),
    $neibs(704,[704,678,703,705]),
    $neibs(705,[705,679,733,704,706]),
    $neibs(706,[706,680,734,705,707]),
    $neibs(707,[707,681,735,706,708]),
    $neibs(708,[708,682,707,709]),
    $neibs(709,[709,683,736,708,710]),
    $neibs(710,[710,684,737,709,711]),
    $neibs(711,[711,685,738,710,712]),
    $neibs(712,[712,686,711,713]),
    $neibs(713,[713,739,712,714]),
    $neibs(714,[714,740,713,715]),
    $neibs(715,[715,687,741,714,716]),
    $neibs(716,[716,688,742,715,717]),
    $neibs(717,[717,689,743,716,718]),
    $neibs(718,[718,690,744,717,719]),
    $neibs(719,[719,691,745,718,720]),
    $neibs(720,[720,692,746,719,721]),
    $neibs(721,[721,693,747,720,722]),
    $neibs(722,[722,694,721,723]),
    $neibs(723,[723,695,722,724]),
    $neibs(724,[724,723]),
    $neibs(725,[725,697,748,726]),
    $neibs(726,[726,749,725]),
    $neibs(727,[727,728]),
    $neibs(728,[728,700,752,727,729]),
    $neibs(729,[729,701,753,728,730]),
    $neibs(730,[730,754,729,731]),
    $neibs(731,[731,702,755,730,732]),
    $neibs(732,[732,703,731]),
    $neibs(733,[733,705,757,734]),
    $neibs(734,[734,706,758,733,735]),
    $neibs(735,[735,707,759,734]),
    $neibs(736,[736,709,760,737]),
    $neibs(737,[737,710,736,738]),
    $neibs(738,[738,711,761,737]),
    $neibs(739,[739,713,762,740]),
    $neibs(740,[740,714,763,739,741]),
    $neibs(741,[741,715,764,740,742]),
    $neibs(742,[742,716,741,743]),
    $neibs(743,[743,717,765,742,744]),
    $neibs(744,[744,718,766,743,745]),
    $neibs(745,[745,719,767,744,746]),
    $neibs(746,[746,720,768,745,747]),
    $neibs(747,[747,721,769,746]),
    $neibs(748,[748,725,749]),
    $neibs(749,[749,726,771,748,750]),
    $neibs(750,[750,749,751]),
    $neibs(751,[751,772,750]),
    $neibs(752,[752,728,753]),
    $neibs(753,[753,729,752,754]),
    $neibs(754,[754,730,774,753,755]),
    $neibs(755,[755,731,754]),
    $neibs(756,[756,757]),
    $neibs(757,[757,733,756,758]),
    $neibs(758,[758,734,776,757,759]),
    $neibs(759,[759,735,777,758]),
    $neibs(760,[760,736,779]),
    $neibs(761,[761,738]),
    $neibs(762,[762,739,782,763]),
    $neibs(763,[763,740,783,762,764]),
    $neibs(764,[764,741,784,763]),
    $neibs(765,[765,743,786,766]),
    $neibs(766,[766,744,787,765,767]),
    $neibs(767,[767,745,788,766,768]),
    $neibs(768,[768,746,767,769]),
    $neibs(769,[769,747,789,768,770]),
    $neibs(770,[770,790,769]),
    $neibs(771,[771,749,793]),
    $neibs(772,[772,751,795,773]),
    $neibs(773,[773,796,772]),
    $neibs(774,[774,754,799]),
    $neibs(775,[775,801]),
    $neibs(776,[776,758,804,777]),
    $neibs(777,[777,759,805,776,778]),
    $neibs(778,[778,777,779]),
    $neibs(779,[779,760,806,778,780]),
    $neibs(780,[780,807,779]),
    $neibs(781,[781,808,782]),
    $neibs(782,[782,762,809,781,783]),
    $neibs(783,[783,763,810,782,784]),
    $neibs(784,[784,764,811,783,785]),
    $neibs(785,[785,812,784,786]),
    $neibs(786,[786,765,813,785,787]),
    $neibs(787,[787,766,814,786,788]),
    $neibs(788,[788,767,815,787]),
    $neibs(789,[789,769,790]),
    $neibs(790,[790,770,817,789,791]),
    $neibs(791,[791,818,790,792]),
    $neibs(792,[792,819,791]),
    $neibs(793,[793,771,794]),
    $neibs(794,[794,793,795]),
    $neibs(795,[795,772,794,796]),
    $neibs(796,[796,773,795,797]),
    $neibs(797,[797,796,798]),
    $neibs(798,[798,797,799]),
    $neibs(799,[799,774,798,800]),
    $neibs(800,[800,799,801]),
    $neibs(801,[801,775,800,802]),
    $neibs(802,[802,801,803]),
    $neibs(803,[803,802,804]),
    $neibs(804,[804,776,803,805]),
    $neibs(805,[805,777,804]),
    $neibs(806,[806,779,807]),
    $neibs(807,[807,780,806]),
    $neibs(808,[808,781,809]),
    $neibs(809,[809,782,808,810]),
    $neibs(810,[810,783,809,811]),
    $neibs(811,[811,784,810,812]),
    $neibs(812,[812,785,811,813]),
    $neibs(813,[813,786,812,814]),
    $neibs(814,[814,787,813,815]),
    $neibs(815,[815,788,814,816]),
    $neibs(816,[816,815]),
    $neibs(817,[817,790,818]),
    $neibs(818,[818,791,817,819]),
    $neibs(819,[819,792,818])
    ],
    As = [(427,641),(763,583),(49,611),(385,736),(668,472),(232,215),(785,733),(607,744),(251,306),(193,82),(476,392),(791,530),(581,614),(698,21),(692,649),(238,132),(372,226),(535,465),(402,618),(504,550)],
    Avoid = new_array(0,0),
    Makespan = -1,
    SumOfCosts = -1.
